<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx.xsd
   http://www.springframework.org/schema/context
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">

    <!-- 导入外部参数文件 -->
    <context:property-placeholder location="classpath:jdbc.properties"/>

    <!-- 连接池 -->
    <bean id="druid" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <!-- 基本属性 url,user,password -->
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.user}"/>
        <property name="password" value="${jdbc.password}"/>

        <!-- 配置初始化大小， 最大、最小 -->
        <property name="initialSize" value="1"/>
        <property name="minIdle" value="1"/>
        <property name="maxActive" value="${jdbc.maxPoolSize}"/>

        <!-- 配置获取连接等待超时的时间 -->
        <property name="maxWait" value="3000"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接、单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>

        <!-- 配置一个连接在池中最小空闲的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="300000"/>

        <!-- 验证连接有效与否的SQL，不同的数据配置不同 -->

        <property name="validationQuery" value="SELECT 'x' from dual " />
        <property name="testWhileIdle" value="true" />
        <property name="testOnBorrow" value="false" />
        <property name="testOnReturn" value="false" />

        <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />

        <!-- 配置监控统计拦截的filters -->
        <property name="filters" value="stat" />
    </bean>

    <!-- SqlSessionFactory
         配置： 1. 连接池
               2. mapper文件信息
               3. 别名-可选
               4. 插件-可选
    -->
    <bean id="sqlSessionFactory01" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--<property name="configLocation" value="classpath:configuration.xml"/>-->
        <!-- 连接池 -->
        <property name="dataSource" ref="druid"/>
        <!-- 别名 -->
        <property name="typeAliasesPackage" value="com.pc.vo"/>
    </bean>

    <!-- 扫描所有mapper，为每个dao定制实现类
         sqlSession.getMapper(UserDAO.class)
         DAO实现的对象会纳入工厂，并且beanID=DAO的首字母小写接口类名
         1. DAO接口
         2. DAO映射文件
         3. SqlSession
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">

        <!-- 如果当前工厂只有一个sqlSessionFactory,则此项注入可以省略 -->
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory01"/>

        <property name="basePackage" value="com.pc.dao"/>
    </bean>

    <!-- 配置注释扫描，让spring去发现注释，进而实现对应的功能 -->
    <context:component-scan base-package="com.pc">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
    </context:component-scan>

    <!-- 事务管理器 -->
    <bean id="tx" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="druid"/>
    </bean>

    <!-- 支持实现事务 -->
    <tx:annotation-driven transaction-manager="tx"/>
</beans>
